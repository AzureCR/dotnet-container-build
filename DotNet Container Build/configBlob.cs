// <auto-generated />
// Using Quicktype

namespace QuickType
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ConfigBlob
    {
        [JsonProperty("architecture")]
        public string Architecture { get; set; }

        [JsonProperty("config")]
        public Conconfig Config { get; set; }

        [JsonProperty("container")]
        public string Container { get; set; }

        [JsonProperty("container_config")]
        public Conconfig ContainerConfig { get; set; }

        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("docker_version")]
        public string DockerVersion { get; set; }

        [JsonProperty("history")]
        public History[] History { get; set; }

        [JsonProperty("os")]
        public string Os { get; set; }

        [JsonProperty("rootfs")]
        public Rootfs Rootfs { get; set; }
    }

    public partial class Conconfig
    {
        [JsonProperty("Hostname")]
        public string Hostname { get; set; }

        [JsonProperty("Domainname")]
        public string Domainname { get; set; }

        [JsonProperty("User")]
        public string User { get; set; }

        [JsonProperty("AttachStdin")]
        public bool AttachStdin { get; set; }

        [JsonProperty("AttachStdout")]
        public bool AttachStdout { get; set; }

        [JsonProperty("AttachStderr")]
        public bool AttachStderr { get; set; }

        [JsonProperty("Tty")]
        public bool Tty { get; set; }

        [JsonProperty("OpenStdin")]
        public bool OpenStdin { get; set; }

        [JsonProperty("StdinOnce")]
        public bool StdinOnce { get; set; }

        [JsonProperty("Env")]
        public string[] Env { get; set; }

        [JsonProperty("Cmd")]
        public string[] Cmd { get; set; }

        [JsonProperty("ArgsEscaped", NullValueHandling = NullValueHandling.Ignore)]
        public bool? ArgsEscaped { get; set; }

        [JsonProperty("Image")]
        public string Image { get; set; }

        [JsonProperty("Volumes")]
        public object Volumes { get; set; }

        [JsonProperty("WorkingDir")]
        public string WorkingDir { get; set; }

        [JsonProperty("Entrypoint")]
        public object Entrypoint { get; set; }

        [JsonProperty("OnBuild")]
        public object OnBuild { get; set; }

        [JsonProperty("Labels")]
        public object Labels { get; set; }
    }

    public partial class History
    {
        [JsonProperty("created")]
        public DateTimeOffset Created { get; set; }

        [JsonProperty("created_by")]
        public string CreatedBy { get; set; }

        [JsonProperty("empty_layer", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EmptyLayer { get; set; }
    }

    public partial class Rootfs
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("diff_ids")]
        public List<string> DiffIds { get; set; }
    }

    public partial class ConfigBlob
    {
        public static ConfigBlob FromJson(string json) => JsonConvert.DeserializeObject<ConfigBlob>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ConfigBlob self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
